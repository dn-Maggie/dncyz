<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dongnao.workbench.finance.dao.AccountCheckMapper">
	<resultMap id="BaseResultMap" type="com.dongnao.workbench.finance.model.AccountCheck">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="account_time" property="accountTime" jdbcType="DATE" />
		<result column="elm_settlement" property="elmSettlement" jdbcType="DOUBLE" />
		<result column="baidu_settlement" property="baiduSettlement" jdbcType="DOUBLE" />
		<result column="meituan_settlement" property="meituanSettlement" jdbcType="DOUBLE" />
		<result column="total_settlement" property="totalSettlement" jdbcType="DOUBLE" />
		<result column="elm_cost" property="elmCost" jdbcType="DOUBLE" />
		<result column="baidu_cost" property="baiduCost" jdbcType="DOUBLE" />
		<result column="meituan_cost" property="meituanCost" jdbcType="DOUBLE" />
		<result column="actual_settlement" property="actualSettlement" jdbcType="DOUBLE" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="store_id" property="storeId" jdbcType="VARCHAR" />
		<result column="store_name" property="storeName" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="AccountCheckTotal" type="com.dongnao.workbench.finance.model.AccountOperateIncome">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="store_id" property="storeId" jdbcType="VARCHAR" />
		<result column="store_name" property="storeName" jdbcType="VARCHAR" />
		<result column="create_date" property="createDate" jdbcType="DATE" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="order_no" property="orderNo" jdbcType="VARCHAR" />
		<result column="valid_num" property="validNum" jdbcType="INTEGER" />
		<result column="orgin_price" property="orginPrice" jdbcType="DECIMAL" />
		<result column="discount_price" property="discountPrice" jdbcType="DECIMAL" />
		<result column="after_discount_price" property="afterDiscountPrice" jdbcType="DECIMAL" />
		<result column="special_offer" property="specialOffer" jdbcType="DECIMAL" />
		<result column="actual_price" property="actualPrice" jdbcType="DECIMAL" />
		<result column="order_sale_rate" property="orderSaleRate" jdbcType="DECIMAL" />
		<result column="amount_payable" property="amountPayable" jdbcType="DECIMAL" />
	</resultMap>
	<sql id="Base_Column_List">
	 	id
		,account_time
		,elm_settlement
		,baidu_settlement
		,meituan_settlement
		,total_settlement
		,elm_cost
		,baidu_cost
		,meituan_cost
		,actual_settlement
		,remark
		,store_id
		,store_name
	</sql>
	<sql id="Account_Check_Date_Column_List">
	 	id,
	 	store_id,
		store_name,
		create_date,
		create_time,
		order_no,
		orgin_price,
		discount_price,
		after_discount_price,
		special_offer,
		actual_price,
		order_sale_rate,
		amount_payable
	</sql>
	
	<sql id="Account_Check_Total_Column_List">
	 	id,
	 	store_id,
		store_name,
		create_date,
		orgin_price,
		discount_price,
		after_discount_price,
		special_offer,
		actual_price,
		order_sale_rate,
		amount_payable
	</sql>
	
	
	<select id="getByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
			ac.id
			,ac.account_time
			,ac.elm_settlement
			,ac.baidu_settlement
			,ac.meituan_settlement
			,ac.total_settlement
			,ac.elm_cost
			,ac.baidu_cost
			,ac.meituan_cost
			,ac.actual_settlement
			,ac.remark
			,ac.store_id
			,s.STORE_NAME as storeName
		from account_check as ac
		left join dn_store as s on s.STORE_ID = ac.store_id
		where id = #{id,jdbcType=VARCHAR}
	</select>

	<select id="listDetailAccountCheck" resultMap="AccountCheckTotal" parameterType="com.dongnao.workbench.finance.model.AccountOrderDetail">
		SELECT 
			orderDetail.store_id
			orderDetail.store_name,
			orderDetail.create_date,
			orderDetail.order_time as create_time,
			orderDetail.order_no,
			orderDetail.orgin_price + orderDetail.meal_fee as orgin_price,
			orderDetail.activities_subsidy_bymerchant as discount_price,
			orderDetail.food_discount as after_discount_price,
			orderDetail.special_offer as special_offer,
			orderDetail.orgin_price + orderDetail.meal_fee - orderDetail.activities_subsidy_bymerchant- orderDetail.food_discount as actual_price,
			(orderDetail.orgin_price +orderDetail.meal_fee - orderDetail.activities_subsidy_bymerchant- orderDetail.food_discount)*
			<if test="orderSaleRate != null and '' != orderSaleRate">  
				#{orderSaleRate,jdbcType=DECIMAL}
			</if>
				 + orderDetail.special_offer 
				as amount_payable
			 from
				(select
					od.id,
					od.create_date,
					od.store_id,
					od.store_ELM_id,
					od.store_MT_id,
					od.store_BD_id,
					od.store_name,
					od.check_no,
					od.order_type,
					od.order_time,
					od.over_time,
					od.order_index,
					od.order_no,
					od.orgin_price,
					od.meal_fee,
					od.product_sale_amount,
					od.gift_allowance,
					od.merchant_activities_subsidies,
					od.merchant_subsidy_vouchers,
					od.actual_merchant_dist_charge,
					od.merchant_dist_charge,
					od.order_dist_charge,
					od.platform_dist_charge,
					od.service_rate,
					od.service_charge,
					od.refund_amount,
					od.settlement_amount,
					od.distribution_mode,
					od.remark,
					od.platform_activities_subsidies,
					od.platform_subsidy_vouchers,
					od.platform_type,
					od.is_invalid,
					od.activities_subsidy_bymerchant,
					(od.merchant_activities_subsidies-od.activities_subsidy_bymerchant) as activities_subsidy_bycompany,
					od.food_discount,
					sp.special_offer,
					od.booked_time,
					od.consignee_name,
					od.consignee_phones,
					od.active_time,
					od.active_total,
					od.goods_name,
					od.goods_quality,
					od.goods_id,
					od.goods_price,
					od.order_sale_rate
				from account_order_detail as od 
				LEFT JOIN dn_store as s on s.elm_id = od.store_ELM_id 
				LEFT JOIN store_product as sp on sp.store_id = s.STORE_ID and FIND_IN_SET(sp.product_name,od.goods_name)>0
				where 1=1
				<if test="id != null and '' != id">  
					and od.id = #{id,jdbcType=VARCHAR}
				</if>
				<if test="createDate != null and '' != createDate">  
					and od.create_date = #{createDate,jdbcType=DATE}
				</if>
				<if test="storeId != null and '' != storeId">  
					and od.store_id = #{storeId,jdbcType=CHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and od.store_name = #{storeName,jdbcType=VARCHAR}
				</if>
				<if test="checkNo != null and '' != checkNo">  
					and od.check_no = #{checkNo,jdbcType=VARCHAR}
				</if>
				<if test="orderType != null and '' != orderType">  
					and od.order_type = #{orderType,jdbcType=VARCHAR}
				</if>
				<if test="orderTime != null and '' != orderTime">  
					and od.order_time = #{orderTime,jdbcType=TIMESTAMP}
				</if>
				<if test="isInvalid != null and '' != isInvalid">  
					and od.is_invalid = #{isInvalid,jdbcType=TIMESTAMP}
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
					<![CDATA[
						and DATE_FORMAT(od.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(od.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				<if test="null != propsMap.startTime and propsMap.startTime != ''">
					<![CDATA[
						and DATE_FORMAT(od.order_time,'%h:%m"%s') >= DATE_FORMAT(#{propsMap.startTime,jdbcType=TIMESTAMP},'%h:%m:%s')
					]]>
				</if>
				<if test="null != propsMap.endTime and propsMap.endTime != ''">
					<![CDATA[
						and DATE_FORMAT(od.order_time,'%h:%m:%s') <= DATE_FORMAT(#{propsMap.endTime,jdbcType=TIMESTAMP},'%h:%m:%s')
					]]>
				</if> 
				<if test="overTime != null and '' != overTime">  
					and od.over_time = #{overTime,jdbcType=TIMESTAMP}
				</if>
				<if test="orderNo != null and '' != orderNo">  
					and od.order_no = #{orderNo,jdbcType=VARCHAR}
				</if>
				<if test="orginPrice != null and '' != orginPrice">  
					and od.orgin_price = #{orginPrice,jdbcType=DECIMAL}
				</if>
				<if test="serviceRate != null and '' != serviceRate">  
					and od.service_rate = #{serviceRate,jdbcType=VARCHAR}
				</if>
				<if test="serviceCharge != null and '' != serviceCharge">  
					and od.service_charge = #{serviceCharge,jdbcType=DECIMAL}
				</if>
				<if test="refundAmount != null and '' != refundAmount">  
					and od.refund_amount = #{refundAmount,jdbcType=VARCHAR}
				</if>
				<if test="distributionMode != null and '' != distributionMode">  
					and od.distribution_mode = #{distributionMode,jdbcType=VARCHAR}
				</if>
				<if test="remark != null and '' != remark">  
					and od.remark = #{remark,jdbcType=VARCHAR}
				</if>
				<if test="platformType != null and '' != platformType">  
					and od.platform_type = #{platformType,jdbcType=DECIMAL}
				</if>
				<if test="orderFields != null and '' != orderFields">  
		           	order by ${orderFields} ${order}
		       	</if>) as orderDetail
	</select>
	
	<select id="listByDate" resultMap="AccountCheckTotal" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		select
		<include refid="Account_Check_Date_Column_List" />
		from account_check_date
		where 1=1
		<if test="id != null and '' != id">  
			and id = #{id,jdbcType=VARCHAR}
		</if>
		<if test="storeId != null and '' != storeId">  
			and store_id = #{storeId,jdbcType=VARCHAR}
		</if>
		<if test="storeName != null and '' != storeName">  
			and store_name = #{storeName,jdbcType=VARCHAR}
		</if>
		<if test="null != propsMap.startDate and propsMap.startDate != ''">
			<![CDATA[
				and DATE_FORMAT(create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != propsMap.endDate and propsMap.endDate != ''">
			<![CDATA[
				and DATE_FORMAT(create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if> 
		<if test="createTime != null and '' != createTime">  
			and create_time = #{createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="orderNo != null and '' != orderNo">  
			and order_no = #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test="orderFields != null and '' != orderFields">  
           	order by ${orderFields} ${order}
        </if>
	</select>
	
	
	<select id="listByTotal" resultMap="AccountCheckTotal" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		select
		<include refid="Account_Check_Total_Column_List" />
		from account_check_total
		where 1=1
		<if test="id != null and '' != id">  
			and id = #{id,jdbcType=VARCHAR}
		</if>
		<if test="storeId != null and '' != storeId">  
			and store_id = #{storeId,jdbcType=VARCHAR}
		</if>
		<if test="storeName != null and '' != storeName">  
			and store_name = #{storeName,jdbcType=VARCHAR}
		</if>
		<if test="null != propsMap.startDate and propsMap.startDate != ''">
			<![CDATA[
				and DATE_FORMAT(create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != propsMap.endDate and propsMap.endDate != ''">
			<![CDATA[
				and DATE_FORMAT(create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if> 
		<if test="createTime != null and '' != createTime">  
			and create_time = #{createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="orderNo != null and '' != orderNo">  
			and order_no = #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test="orderFields != null and '' != orderFields">  
           	order by ${orderFields} ${order}
        </if>
	</select>
	
	<delete id="deleteByKey" parameterType="java.lang.String">
		delete from account_check
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	
	<delete id="deleteDateByKey" parameterType="java.lang.String">
		delete from account_check_date
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	
	<delete id="deleteTotalByKey" parameterType="java.lang.String">
		delete from account_check_total
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	
	<insert id="add" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		insert into account_check (
		<include refid="Base_Column_List" />
		)values (
				#{id,jdbcType=VARCHAR}
				,#{accountTime,jdbcType=DATE}
				,#{elmSettlement,jdbcType=DOUBLE}
				,#{baiduSettlement,jdbcType=DOUBLE}
				,#{meituanSettlement,jdbcType=DOUBLE}
				,#{totalSettlement,jdbcType=DOUBLE}
				,#{elmCost,jdbcType=DOUBLE}
				,#{baiduCost,jdbcType=DOUBLE}
				,#{meituanCost,jdbcType=DOUBLE}
				,#{actualSettlement,jdbcType=DOUBLE}
				,#{remark,jdbcType=VARCHAR}
				,#{storeId,jdbcType=VARCHAR}
				,#{storeName,jdbcType=VARCHAR}
			)
	</insert>
	
	<insert id="addByCheckDetail" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		insert into account_check_date (
		<include refid="Account_Check_Date_Column_List" />
		)values (
			SELECT
			CONCAT(od.create_date,od.store_name,#{id,jdbcType=VARCHAR}),
			od.store_id,
			od.store_name,
			od.create_date,
			od.order_time as create_time,
			od.order_no,
			od.orgin_price + od.meal_fee as orgin_price,
			od.activities_subsidy_bymerchant as discount_price,
			od.food_discount as after_discount_price,
			sp.special_offer as special_offer,
			od.orgin_price + od.meal_fee - od.activities_subsidy_bymerchant- od.food_discount as actual_price,
			#{orderSaleRate,jdbcType=DECIMAL} as order_sale_rate,
			(od.orgin_price +od.meal_fee - od.activities_subsidy_bymerchant- od.food_discount)*
			<if test="orderSaleRate != null and '' != orderSaleRate">  
				#{orderSaleRate,jdbcType=DECIMAL}
			</if>
				 + sp.special_offer
			 as amount_payable
			 from
			 account_order_detail as od 
			LEFT JOIN dn_store as s on s.elm_id = od.store_ELM_id 
			LEFT JOIN store_product as sp on sp.store_id = s.STORE_ID and FIND_IN_SET(sp.product_name,od.goods_name)>0
			where 1=1
			)
	</insert>
	
	<!-- insert id="addTotalByCheckDetail" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		insert into account_check_total (
		<include refid="AccountCheckTotal" />
		)values (
				#{id,jdbcType=VARCHAR}
				,#{accountTime,jdbcType=DATE}
				,#{elmSettlement,jdbcType=DOUBLE}
				,#{baiduSettlement,jdbcType=DOUBLE}
				,#{meituanSettlement,jdbcType=DOUBLE}
				,#{totalSettlement,jdbcType=DOUBLE}
				,#{elmCost,jdbcType=DOUBLE}
				,#{baiduCost,jdbcType=DOUBLE}
				,#{meituanCost,jdbcType=DOUBLE}
				,#{actualSettlement,jdbcType=DOUBLE}
				,#{remark,jdbcType=VARCHAR}
				,#{storeId,jdbcType=VARCHAR}
				,#{storeName,jdbcType=VARCHAR}
			)
	</insert-->
	
	<update id="update" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		update account_check  set
			ID= #{id,jdbcType=VARCHAR}
			,account_time = #{accountTime,jdbcType=DATE}
			,elm_settlement = #{elmSettlement,jdbcType=DOUBLE}
			,baidu_settlement = #{baiduSettlement,jdbcType=DOUBLE}
			,meituan_settlement = #{meituanSettlement,jdbcType=DOUBLE}
			,total_settlement = #{totalSettlement,jdbcType=DOUBLE}
			,elm_cost = #{elmCost,jdbcType=DOUBLE}
			,baidu_cost = #{baiduCost,jdbcType=DOUBLE}
			,meituan_cost = #{meituanCost,jdbcType=DOUBLE}
			,actual_settlement = #{actualSettlement,jdbcType=DOUBLE}
			,remark = #{remark,jdbcType=VARCHAR}
			,store_id = #{storeId,jdbcType=VARCHAR}
			,store_name = #{storeName,jdbcType=VARCHAR}
		where id = #{id,jdbcType=VARCHAR}
	</update>
</mapper>
