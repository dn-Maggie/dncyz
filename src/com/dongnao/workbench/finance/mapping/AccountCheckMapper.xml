<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dongnao.workbench.finance.dao.AccountCheckMapper">
	<resultMap id="BaseResultMap" type="com.dongnao.workbench.finance.model.AccountCheck">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="account_time" property="accountTime" jdbcType="DATE" />
		<result column="elm_settlement" property="elmSettlement" jdbcType="DOUBLE" />
		<result column="baidu_settlement" property="baiduSettlement" jdbcType="DOUBLE" />
		<result column="meituan_settlement" property="meituanSettlement" jdbcType="DOUBLE" />
		<result column="total_settlement" property="totalSettlement" jdbcType="DOUBLE" />
		<result column="elm_cost" property="elmCost" jdbcType="DOUBLE" />
		<result column="baidu_cost" property="baiduCost" jdbcType="DOUBLE" />
		<result column="meituan_cost" property="meituanCost" jdbcType="DOUBLE" />
		<result column="actual_settlement" property="actualSettlement" jdbcType="DOUBLE" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="store_id" property="storeId" jdbcType="VARCHAR" />
		<result column="store_name" property="storeName" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="AccountCheckTotal" type="com.dongnao.workbench.finance.model.OperaDate">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="store_id" property="storeId" jdbcType="VARCHAR" />
		<result column="store_name" property="storeName" jdbcType="VARCHAR" />
		<result column="create_date" property="createDate" jdbcType="DATE" />
		<result column="invalid_num" property="invalidNum" jdbcType="INTEGER" />
		<result column="valid_num" property="validNum" jdbcType="INTEGER" />
		<result column="orgin_price" property="orginPrice" jdbcType="DECIMAL" />
		<result column="meal_fee" property="mealFee" jdbcType="VARCHAR" />
		<result column="special_orgin" property="specialOrgin" jdbcType="DECIMAL" />
		
		<result column="special_offer" property="specialOffer" jdbcType="DECIMAL" />
		<result column="elm_special_offer" property="elmSpecialOffer" jdbcType="DECIMAL" />
		<result column="bd_special_offer" property="bdSpecialOffer" jdbcType="DECIMAL" />
		<result column="mt_special_offer" property="mtSpecialOffer" jdbcType="DECIMAL" />
		
		<result column="elm_meal_fee" property="elmMealFee" jdbcType="DECIMAL" />
		<result column="bd_meal_fee" property="bdMealFee" jdbcType="DECIMAL" />
		<result column="mt_meal_fee" property="mtMealFee" jdbcType="DECIMAL" />
		
		<result column="actual_price" property="actualPrice" jdbcType="DECIMAL" />
		<result column="elm_actual_price" property="elmActualPrice" jdbcType="DECIMAL" />
		<result column="bd_actual_price" property="bdActualPrice" jdbcType="DECIMAL" />
		<result column="mt_actual_price" property="mtActualPrice" jdbcType="DECIMAL" />

		<result column="elm_recieve_adjust" property="elmRecieveAdjust" jdbcType="DECIMAL" />
		<result column="bd_recieve_adjust" property="bdRecieveAdjust" jdbcType="DECIMAL" />
		<result column="mt_recieve_adjust" property="mtRecieveAdjust" jdbcType="DECIMAL" />
		
		<result column="settlement" property="settlement" jdbcType="DECIMAL" />
		<result column="amount_rate_payable" property="amountRatePayable" jdbcType="DECIMAL" />
		<result column="elm_settlement" property="elmSettlement" jdbcType="DECIMAL" />
		<result column="bd_settlement" property="bdSettlement" jdbcType="DECIMAL" />
		<result column="mt_settlement" property="mtSettlement" jdbcType="DECIMAL" />
		<result column="allother_base_price" property="allotherBasePrice" jdbcType="DECIMAL" />
		<result column="order_sale_rate" property="orderSaleRate" jdbcType="DECIMAL" />
		<result column="amount_payable" property="amountPayable" jdbcType="DECIMAL" />
	</resultMap>
	<sql id="Base_Column_List">
	 	id
		,account_time
		,elm_settlement
		,baidu_settlement
		,meituan_settlement
		,total_settlement
		,elm_cost
		,baidu_cost
		,meituan_cost
		,actual_settlement
		,remark
		,store_id
		,store_name
	</sql>
	<!-- 查询商家绑定结算信息 -->
	<select id="listDetailAccountCheckByBoundMerchant" resultMap="AccountCheckTotal" parameterType="com.dongnao.workbench.finance.model.AccountOrderDetail">
			(
			SELECT
				odb.id,
				odb.store_id,
				s.bound_type,
				odb.store_name,
				odb.create_date,
				odb.invalid_num,
				odb.valid_num,
				odb.orgin_price,
				odb.meal_fee,
				odb.special_orgin,
				odb.special_offer,
				odb.order_sale_rate,
				odb.orgin_price + odb.meal_fee - odb.special_orgin as actual_price,
				odb.amount_payable
			FROM
				opera_date_base_price AS odb
			LEFT JOIN dn_store AS s ON s.store_name = odb.store_name
			WHERE
				s.bound_type = '1' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odb.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odb.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				<if test="null != propsMap.startDate and propsMap.startDate != ''">
					<![CDATA[
						and DATE_FORMAT(odb.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odb.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
			GROUP BY
				odb.store_name,
				create_date
		)
		UNION
			(
				SELECT
					odp.id,
					odp.store_id,
					s.bound_type,
					odp.store_name,
					odp.create_date,
					odp.invalid_num,
					odp.valid_num,
					odp.orgin_price,
					odp.meal_fee,
					odp.special_orgin,
					odp.special_offer,
					odp.order_sale_rate,
					odp.orgin_price + odp.meal_fee - odp.special_orgin as actual_price,
					odp.amount_payable
				FROM
					opera_date_platform_account AS odp
				LEFT JOIN dn_store AS s ON s.store_name = odp.store_name
				WHERE
					s.bound_type = '1' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odp.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odp.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odp.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odp.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					odp.store_name,
					create_date
			)
		UNION
			(
				SELECT
					ods.id,
					ods.store_id,
					s.bound_type,
					ods.store_name,
					ods.create_date,
					ods.invalid_num,
					ods.valid_num,
					ods.orgin_price,
					ods.meal_fee,
					ods.special_orgin,
					ods.special_offer,
					ods.order_sale_rate,
					ods.orgin_price - ods.special_orgin as actual_price,
					ods.amount_payable
				FROM
					opera_date_sale_rate AS ods
				LEFT JOIN dn_store AS s ON s.store_name = ods.store_name
				WHERE
					s.bound_type = '1' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and ods.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and ods.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(ods.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(ods.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					ods.store_name,
					create_date
			)
			UNION
			(
				SELECT
					odd.id,
					odd.store_id,
					s.bound_type,
					odd.store_name,
					odd.create_date,
					odd.invalid_num,
					odd.valid_num,
					odd.orgin_price,
					odd.meal_fee,
					odd.special_orgin,
					odd.special_offer,
					odd.order_sale_rate,
					odd.orgin_price + odd.meal_fee - odd.special_orgin as actual_price,
					odd.amount_payable
				FROM
					opera_date_deep_opera AS odd
				LEFT JOIN dn_store AS s ON s.store_name = odd.store_name
				WHERE
					s.bound_type = '1' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odd.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odd.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odd.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odd.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					odd.store_name,
					create_date
			)
	</select>
	<!-- 查询公司绑定结算信息 -->
	<select id="listDetailAccountCheckByBoundCompany" resultMap="AccountCheckTotal" parameterType="com.dongnao.workbench.finance.model.OperaDate">
			(
			SELECT
				odb.id,
				odb.store_id,
				s.bound_type,
				odb.store_name,
				odb.create_date,
				odb.invalid_num,
				odb.valid_num,
				odb.orgin_price,
				odb.meal_fee,
				odb.special_orgin,
				odb.special_offer,
				odb.order_sale_rate,
				odb.orgin_price + odb.meal_fee - odb.special_orgin as actual_price,
				odb.amount_payable
			FROM
				opera_date_base_price AS odb
			LEFT JOIN dn_store AS s ON s.store_name = odb.store_name
			WHERE
				s.bound_type = '2' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odb.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odb.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odb.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odb.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
			GROUP BY
				odb.store_name,
				create_date
		)
		UNION
			(
				SELECT
					odp.id,
					odp.store_id,
					s.bound_type,
					odp.store_name,
					odp.create_date,
					odp.invalid_num,
					odp.valid_num,
					odp.orgin_price,
					odp.meal_fee,
					odp.special_orgin,
					odp.special_offer,
					odp.order_sale_rate,
					odp.orgin_price + odp.meal_fee - odp.special_orgin as actual_price,
					odp.amount_payable
				FROM
					opera_date_platform_account AS odp
				LEFT JOIN dn_store AS s ON s.store_name = odp.store_name
				WHERE
					s.bound_type = '2' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odp.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odp.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odp.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odp.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					odp.store_name,
					create_date
			)
		UNION
			(
				SELECT
					ods.id,
					ods.store_id,
					s.bound_type,
					ods.store_name,
					ods.create_date,
					ods.invalid_num,
					ods.valid_num,
					ods.orgin_price,
					ods.meal_fee,
					ods.special_orgin,
					ods.special_offer,
					ods.order_sale_rate,
					ods.orgin_price + ods.meal_fee - ods.special_orgin as actual_price,
					ods.amount_payable
				FROM
					opera_date_sale_rate AS ods
				LEFT JOIN dn_store AS s ON s.store_name = ods.store_name
				WHERE
					s.bound_type = '2' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and ods.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and ods.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(ods.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(ods.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					ods.store_name,
					create_date
			)
		UNION
			(
				SELECT
					odd.id,
					odd.store_id,
					s.bound_type,
					odd.store_name,
					odd.create_date,
					odd.invalid_num,
					odd.valid_num,
					odd.orgin_price,
					odd.meal_fee,
					odd.special_orgin,
					odd.special_offer,
					odd.order_sale_rate,
					odd.orgin_price + odd.meal_fee - odd.special_orgin as actual_price,
					odd.amount_payable
				FROM
					opera_date_deep_opera AS odd
				LEFT JOIN dn_store AS s ON s.store_name = odd.store_name
				WHERE
					s.bound_type = '2' and s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odd.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odd.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odd.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odd.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					odd.store_name,
					create_date
			)
	</select>
	
	<!-- 查询汇总结算信息 -->
	<select id="listTotalAccountCheck" resultMap="AccountCheckTotal" parameterType="com.dongnao.workbench.finance.model.AccountOrderDetail">
			(
			SELECT
				odb.id,
				odb.store_id,
				s.bound_type,
				odb.store_name,
				odb.create_date,
				sum((CASE WHEN odb.platform_type = 'elm' then odb.special_offer END)) as elm_special_offer,
				sum((CASE WHEN odb.platform_type = 'bdwm' then odb.special_offer END)) as bd_special_offer,
				sum((CASE WHEN odb.platform_type = 'mt' then odb.special_offer END)) as mt_special_offer,
				sum(odb.special_offer) as special_offer,
				
				sum((CASE WHEN odb.platform_type = 'elm' then odb.meal_fee END)) as elm_meal_fee,
				sum((CASE WHEN odb.platform_type = 'bdwm' then odb.meal_fee END)) as bd_meal_fee,
				sum((CASE WHEN odb.platform_type = 'mt' then odb.meal_fee END)) as mt_meal_fee,
				sum(odb.meal_fee) as meal_fee,
				
				0 as order_sale_rate,
				sum(odb.special_offer ) as actual_price,
				sum(CASE WHEN odb.platform_type = 'elm' then odb.special_offer END)as elm_actual_price,
				sum(CASE WHEN odb.platform_type = 'bdwm' then odb.special_offer END)as bd_actual_price,
				sum(CASE WHEN odb.platform_type = 'mt' then odb.special_offer END) as mt_actual_price,
				
				0 as amount_rate_payable,
				
				sum(CASE WHEN odb.platform_type = 'elm' then odb.special_offer END)as elm_settlement,
				sum(CASE WHEN odb.platform_type = 'bdwm' then odb.special_offer END)as bd_settlement,
				sum(CASE WHEN odb.platform_type = 'mt' then odb.special_offer END)as mt_settlement,
				sum(odb.special_offer) as settlement,
				
				sum(odb.special_offer) as allother_base_price,
				odb.other_all
			FROM
				opera_date_base_price AS odb
			LEFT JOIN dn_store AS s ON s.store_name = odb.store_name
			WHERE
				s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odb.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odb.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odb.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odb.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
			GROUP BY
				odb.store_name,
				create_date
		)
		UNION
			(
				SELECT
					odp.id,
					odp.store_id,
					s.bound_type,
					odp.store_name,
					odp.create_date,
					sum((CASE WHEN odp.platform_type = 'elm' then odp.special_offer END))as elm_special_offer,
					sum((CASE WHEN odp.platform_type = 'bdwm' then odp.special_offer END))as bd_special_offer,
					sum((CASE WHEN odp.platform_type = 'mt' then odp.special_offer END))as mt_special_offer,
					sum(odp.special_offer) as special_offer,
					
					sum((CASE WHEN odp.platform_type = 'elm' then odp.meal_fee END)) as elm_meal_fee,
					sum((CASE WHEN odp.platform_type = 'bdwm' then odp.meal_fee END)) as bd_meal_fee,
					sum((CASE WHEN odp.platform_type = 'mt' then odp.meal_fee END)) as mt_meal_fee,
					sum(odp.meal_fee) as meal_fee,
					
					0 as order_sale_rate,
					sum(odp.orgin_price + odp.meal_fee - odp.special_orgin) as actual_price,
					sum((CASE WHEN odp.platform_type = 'elm' then odp.orgin_price + odp.meal_fee - odp.special_orgin  END))as elm_actual_price,
					sum((CASE WHEN odp.platform_type = 'bdwm' then odp.orgin_price + odp.meal_fee - odp.special_orgin  END))as bd_actual_price,
					sum((CASE WHEN odp.platform_type = 'mt' then odp.orgin_price + odp.meal_fee - odp.special_orgin  END))as mt_actual_price,
					sum(odp.orgin_price + odp.meal_fee - odp.special_orgin )*0.7 as amount_rate_payable,
					sum((CASE WHEN odp.platform_type = 'elm' then odp.special_offer +(odp.orgin_price + odp.meal_fee - odp.special_orgin)*0.7 END))as elm_settlement,
					sum((CASE WHEN odp.platform_type = 'bdwm' then odp.special_offer +(odp.orgin_price + odp.meal_fee - odp.special_orgin)*0.7 END))as bd_settlement,
					sum((CASE WHEN odp.platform_type = 'mt' then odp.special_offer +(odp.orgin_price + odp.meal_fee - odp.special_orgin)*0.7 END))as mt_settlement,
					sum(odp.special_offer +(odp.orgin_price + odp.meal_fee - odp.special_orgin)*0.7) as settlement,
					sum((odp.orgin_price + odp.meal_fee - odp.special_orgin)*0.7 + odp.special_offer) as allother_base_price,
					odp.other_all
				FROM
					opera_date_platform_account AS odp
				LEFT JOIN dn_store AS s ON s.store_name = odp.store_name
				WHERE
					s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odp.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odp.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odp.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odp.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					odp.store_name,
					create_date
			)
		UNION
			(
				SELECT
					ods.id,
					ods.store_id,
					s.bound_type,
					ods.store_name,
					ods.create_date,
					sum((CASE WHEN ods.platform_type = 'elm' then ods.special_offer END))as elm_special_offer,
					sum((CASE WHEN ods.platform_type = 'bdwm' then ods.special_offer END))as bd_special_offer,
					sum((CASE WHEN ods.platform_type = 'mt' then ods.special_offer END))as mt_special_offer,
					sum(ods.special_offer) as special_offer,
					
					sum((CASE WHEN ods.platform_type = 'elm' then ods.meal_fee END)) as elm_meal_fee,
					sum((CASE WHEN ods.platform_type = 'bdwm' then ods.meal_fee END)) as bd_meal_fee,
					sum((CASE WHEN ods.platform_type = 'mt' then ods.meal_fee END)) as mt_meal_fee,
					sum(ods.meal_fee) as meal_fee,
					
					0 as order_sale_rate,
					sum(ods.orgin_price - ods.special_orgin) as actual_price,
					sum((CASE WHEN ods.platform_type = 'elm' then ods.orgin_price  - ods.special_orgin  END)) as elm_actual_price,
					sum((CASE WHEN ods.platform_type = 'bdwm' then ods.orgin_price - ods.special_orgin  END)) as bd_actual_price,
					sum((CASE WHEN ods.platform_type = 'mt' then ods.orgin_price - ods.special_orgin  END)) as mt_actual_price,
					
					sum((ods.orgin_price - ods.special_orgin)*0.7) as amount_rate_payable,
					sum((CASE WHEN ods.platform_type = 'elm' then ods.special_offer +(ods.orgin_price - ods.special_orgin)*0.7+ ods.meal_fee END)) as elm_settlement,
					sum((CASE WHEN ods.platform_type = 'bdwm' then ods.special_offer +(ods.orgin_price - ods.special_orgin)*0.7+ ods.meal_fee END)) as bd_settlement,
					sum((CASE WHEN ods.platform_type = 'mt' then ods.special_offer +(ods.orgin_price - ods.special_orgin)*0.7+ ods.meal_fee END)) as mt_settlement,
					sum(ods.special_offer +(ods.orgin_price  - ods.special_orgin)*0.7+ ods.meal_fee ) as settlement,
					sum((ods.orgin_price - ods.special_orgin)*0.7 + ods.special_offer + ods.meal_fee) as allother_base_price,
					ods.other_all
				FROM
					opera_date_sale_rate AS ods
				LEFT JOIN dn_store AS s ON s.store_name = ods.store_name
				WHERE
					s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and ods.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and ods.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(ods.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(ods.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					ods.store_name,
					create_date
			)
			UNION
			(
				SELECT
					odd.id,
					odd.store_id,
					s.bound_type,
					odd.store_name,
					odd.create_date,
					sum((CASE WHEN odd.platform_type = 'elm' then odd.special_offer END)) as elm_special_offer,
					sum((CASE WHEN odd.platform_type = 'bdwm' then odd.special_offer END)) as bd_special_offer,
					sum((CASE WHEN odd.platform_type = 'mt' then odd.special_offer END)) as mt_special_offer,
					sum(odd.special_offer) as special_offer,
					
					sum((CASE WHEN odd.platform_type = 'elm' then odd.meal_fee END)) as elm_meal_fee,
					sum((CASE WHEN odd.platform_type = 'bdwm' then odd.meal_fee END)) as bd_meal_fee,
					sum((CASE WHEN odd.platform_type = 'mt' then odd.meal_fee END)) as mt_meal_fee,
					sum(odd.meal_fee) as meal_fee,
					
					0 as order_sale_rate,
					sum(odd.orgin_price + odd.meal_fee - odd.special_orgin) as actual_price,
					sum((CASE WHEN odd.platform_type = 'elm' then odd.orgin_price + odd.meal_fee - odd.special_orgin  END)) as elm_actual_price,
					sum((CASE WHEN odd.platform_type = 'bdwm' then odd.orgin_price + odd.meal_fee - odd.special_orgin  END)) as bd_actual_price,
					sum((CASE WHEN odd.platform_type = 'mt' then odd.orgin_price + odd.meal_fee - odd.special_orgin  END)) as mt_actual_price,
					sum(odd.orgin_price + odd.meal_fee - odd.special_orgin)*0.7 as amount_rate_payable,
					sum((CASE WHEN odd.platform_type = 'elm' then odd.special_offer +(odd.orgin_price + odd.meal_fee - odd.special_orgin)*0.7 END)) as elm_settlement,
					sum((CASE WHEN odd.platform_type = 'bdwm' then odd.special_offer +(odd.orgin_price + odd.meal_fee - odd.special_orgin)*0.7 END)) as bd_settlement,
					sum((CASE WHEN odd.platform_type = 'mt' then odd.special_offer +(odd.orgin_price + odd.meal_fee - odd.special_orgin)*0.7 END)) as mt_settlement,
					sum(odd.special_offer +(odd.orgin_price + odd.meal_fee - odd.special_orgin)*0.7) as settlement,
					sum((odd.orgin_price + odd.meal_fee - odd.special_orgin)*0.7 + odd.special_offer) as allother_base_price,
					odd.other_all
				FROM
					opera_date_deep_opera AS odd
				LEFT JOIN dn_store AS s ON s.store_name = odd.store_name
				WHERE
					s.is_delete = 0
				<if test="platformType != null and '' != platformType">  
					and odd.platform_type = #{platformType,jdbcType=VARCHAR}
				</if>
				<if test="storeName != null and '' != storeName">  
					and odd.store_name like CONCAT('%',#{storeName,jdbcType=VARCHAR},'%')
				</if>
				 <if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(odd.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
				</if>
				<if test="null != propsMap.endDate and propsMap.endDate != ''">
					<![CDATA[
						and DATE_FORMAT(odd.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
					]]>
				</if> 
				GROUP BY
					odd.store_name,
					create_date
			)
	</select>
	<insert id="add" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		insert into account_check (
		<include refid="Base_Column_List" />
		)values (
				#{id,jdbcType=VARCHAR}
				,#{accountTime,jdbcType=DATE}
				,#{elmSettlement,jdbcType=DOUBLE}
				,#{baiduSettlement,jdbcType=DOUBLE}
				,#{meituanSettlement,jdbcType=DOUBLE}
				,#{totalSettlement,jdbcType=DOUBLE}
				,#{elmCost,jdbcType=DOUBLE}
				,#{baiduCost,jdbcType=DOUBLE}
				,#{meituanCost,jdbcType=DOUBLE}
				,#{actualSettlement,jdbcType=DOUBLE}
				,#{remark,jdbcType=VARCHAR}
				,#{storeId,jdbcType=VARCHAR}
				,#{storeName,jdbcType=VARCHAR}
			)
	</insert>
	
	<update id="updateTotal" parameterType="com.dongnao.workbench.finance.model.AccountCheck">
		update account_check  set
			ID= #{id,jdbcType=VARCHAR}
			,account_time = #{accountTime,jdbcType=DATE}
			,elm_settlement = #{elmSettlement,jdbcType=DOUBLE}
			,baidu_settlement = #{baiduSettlement,jdbcType=DOUBLE}
			,meituan_settlement = #{meituanSettlement,jdbcType=DOUBLE}
			,total_settlement = #{totalSettlement,jdbcType=DOUBLE}
			,elm_cost = #{elmCost,jdbcType=DOUBLE}
			,baidu_cost = #{baiduCost,jdbcType=DOUBLE}
			,meituan_cost = #{meituanCost,jdbcType=DOUBLE}
			,actual_settlement = #{actualSettlement,jdbcType=DOUBLE}
			,remark = #{remark,jdbcType=VARCHAR}
			,store_id = #{storeId,jdbcType=VARCHAR}
			,store_name = #{storeName,jdbcType=VARCHAR}
		where id = #{id,jdbcType=VARCHAR}
	</update>
</mapper>
