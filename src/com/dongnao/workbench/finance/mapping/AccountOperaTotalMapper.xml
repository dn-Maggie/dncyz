<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dongnao.workbench.finance.dao.AccountOperaTotalMapper">
	<resultMap id="BaseResultMap" type="com.dongnao.workbench.finance.model.AccountOperaTotal">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="store_id" property="storeId" jdbcType="VARCHAR" />
		<result column="brand_name" property="brandName" jdbcType="VARCHAR" />
		<result column="store_name" property="storeName" jdbcType="VARCHAR" />
		<result column="store_type" property="storeType" jdbcType="VARCHAR" />
		<result column="store_dist_mode" property="storeDistMode" jdbcType="VARCHAR" />
		<result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
		<result column="invalid_num" property="invalidNum" jdbcType="INTEGER" />
		<result column="valid_num" property="validNum" jdbcType="INTEGER" />
		<result column="product_sale_amount" property="productSaleAmount" jdbcType="VARCHAR" />
		<result column="amount_receivable" property="amountReceivable" jdbcType="VARCHAR" />
		<result column="amount_payable" property="amountPayable" jdbcType="VARCHAR" />
		<result column="cyz_service_charge" property="cyzServiceCharge" jdbcType="VARCHAR" />
		<result column="sale_gross_profit" property="saleGrossProfit" jdbcType="VARCHAR" />
		<result column="dist_price" property="distPrice" jdbcType="VARCHAR" />
		<result column="dist_all" property="distAll" jdbcType="VARCHAR" />
		<result column="dist_diff" property="distDiff" jdbcType="VARCHAR" />
		<result column="actual_merchant_dist_charge" property="actualMerchantDistCharge" jdbcType="VARCHAR" />
		<result column="platform_activities_charge" property="platformActivitiesCharge" jdbcType="VARCHAR" />
		<result column="service_all" property="serviceAll" jdbcType="VARCHAR" />
		<result column="other_all" property="otherAll" jdbcType="VARCHAR" />
		<result column="profit_all" property="profitAll" jdbcType="VARCHAR" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="platform_type" property="platformType" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
	 	id,
		store_id,
		store_name,
		create_date,
		invalid_num,
		valid_num,
		product_sale_amount,
		amount_receivable,
		amount_payable,
		cyz_service_charge,
		sale_gross_profit,
		dist_price,
		dist_all,
		dist_diff,
		actual_merchant_dist_charge,
		platform_activities_charge,
		service_all,
		other_all,
		profit_all,
		remark,
		platform_type
	</sql>
	
	<!--查看浅运营表 -->
	<select id="listSimpleTotalByCondition" resultMap="BaseResultMap" parameterType="com.dongnao.workbench.finance.model.AccountOperaTotal">
		select
			aos.id,
			aos.store_id,
			aos.store_name,
			b.BRAND_NAME,
			s.store_type,
			s.store_dist_mode,
			aos.create_date,
			sum(aos.invalid_num) as invalid_num,
			sum(aos.valid_num) as valid_num,
			sum(aos.product_sale_amount) as product_sale_amount,
			sum(aos.amount_receivable) as amount_receivable,
			sum(aos.amount_payable) as amount_payable,
			sum(aos.cyz_service_charge) as cyz_service_charge,
			sum(aos.sale_gross_profit) as sale_gross_profit,
			sum(aos.dist_price) as dist_price,
			sum(aos.dist_price) as dist_all,
			sum(aos.dist_price -aos.actual_merchant_dist_charge) as dist_diff,
			sum(aos.actual_merchant_dist_charge) as actual_merchant_dist_charge,
			sum(aos.platform_activities_charge) as platform_activities_charge,
			sum(aos.platform_activities_charge*0.4) as service_all,
			sum(aos.other_all) as other_all,
			sum(aos.sale_gross_profit-(aos.dist_price-aos.actual_merchant_dist_charge)-aos.platform_activities_charge*0.4) as profit_all,
			aos.remark,
			aos.platform_type
		from account_opera_simple_total as aos 
		LEFT JOIN dn_store as s on s.STORE_NAME = aos.store_name
		LEFT JOIN dn_brand as b on b.BRAND_ID = s.BRAND_ID
		where s.is_delete = 0
		<if test="id != null and '' != id">  
			and aos.id = #{id,jdbcType=VARCHAR}
		</if>
		<if test="storeId != null and '' != storeId">  
			and aos.store_id = #{storeId,jdbcType=VARCHAR}
		</if>
		<if test="storeName != null and '' != storeName">  
			and aos.store_name = #{storeName,jdbcType=VARCHAR}
		</if>
		<if test="null != propsMap.startDate and propsMap.startDate != ''">
			<![CDATA[
				and DATE_FORMAT(aos.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != propsMap.endDate and propsMap.endDate != ''">
			<![CDATA[
				and DATE_FORMAT(aos.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if> 
		<if test="platformType != null and '' != platformType">  
			and aos.platform_type = #{platformType,jdbcType=VARCHAR}
		</if>
       		GROUP BY aos.store_name
       	<if test="orderFields != null and '' != orderFields">  
           	order by ${orderFields} ${order}
       	</if>
	</select>
	<!--查看深运营表 -->
	<select id="listDeepTotalByCondition" resultMap="BaseResultMap" parameterType="com.dongnao.workbench.finance.model.AccountOperaTotal">
		select
			aod.id,
			aod.store_id,
			aod.store_name,
			b.BRAND_NAME,
			s.store_type,
			s.store_dist_mode,
			aod.create_date,
			sum(aod.invalid_num) as invalid_num,
			sum(aod.valid_num) as valid_num,
			sum(aod.product_sale_amount) as product_sale_amount,
			sum(aod.amount_receivable) as amount_receivable,
			sum(aod.amount_payable) as amount_payable,
			sum(aod.cyz_service_charge) as cyz_service_charge,
			sum(aod.sale_gross_profit) as sale_gross_profit,
			sum(aod.dist_price) as dist_price,
			sum(aod.dist_price) as dist_all,
			sum(aod.dist_price-aod.actual_merchant_dist_charge) as dist_diff,
			sum(aod.actual_merchant_dist_charge) as actual_merchant_dist_charge,
			sum(aod.platform_activities_charge) as platform_activities_charge,
			sum(aod.platform_activities_charge*0.4) as service_all,
			sum(aod.other_all) as other_all,
			sum(aod.sale_gross_profit-(aod.dist_price-aod.actual_merchant_dist_charge)-aod.platform_activities_charge*0.4) as profit_all,
			aod.remark,
			aod.platform_type
		from account_opera_deep_total as aod
		LEFT JOIN dn_store as s on s.STORE_NAME = aod.store_name
		LEFT JOIN dn_brand as b on b.BRAND_ID = s.BRAND_ID
			where s.is_delete = 0
			<if test="id != null and '' != id">  
				and aod.id = #{id,jdbcType=VARCHAR}
			</if>
			<if test="storeId != null and '' != storeId">  
				and aod.store_id = #{storeId,jdbcType=VARCHAR}
			</if>
			<if test="storeName != null and '' != storeName">  
				and aod.store_name = #{storeName,jdbcType=VARCHAR}
			</if>
			<if test="null != propsMap.startDate and propsMap.startDate != ''">
				<![CDATA[
					and DATE_FORMAT(aod.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
			</if>
			<if test="null != propsMap.endDate and propsMap.endDate != ''">
				<![CDATA[
					and DATE_FORMAT(aod.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
				]]>
			</if> 
			<if test="remark != null and '' != remark">  
				and aod.remark = #{remark,jdbcType=VARCHAR}
			</if>
			<if test="platformType != null and '' != platformType">  
				and aod.platform_type = #{platformType,jdbcType=VARCHAR}
			</if>
				GROUP BY aod.store_name
			<if test="orderFields != null and '' != orderFields">  
	           	order by ${orderFields} ${order}
	       	</if>
	</select>
	
	<!--删除浅运营数据 -->	
	<delete id="deleteSimpleTotalByOperaDate" parameterType="com.dongnao.workbench.finance.model.OperaDate">
		delete from account_opera_simple_total
		where store_name  = #{storeName,jdbcType=VARCHAR}
		<if test="null != propsMap.startDate and propsMap.startDate != ''">
			<![CDATA[
			and DATE_FORMAT(create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != propsMap.endDate and propsMap.endDate != ''">
			<![CDATA[
			and DATE_FORMAT(create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if> 
		<if test="null != createDate and createDate != ''">
			and DATE_FORMAT(create_date,'%Y-%c-%d') = DATE_FORMAT(#{createDate,jdbcType=DATE},'%Y-%c-%d')
		</if> 
		<if test="platformType != null and '' != platformType">  
			and platform_type = #{platformType,jdbcType=VARCHAR}
		</if>
	</delete>
	<!--删除深运营数据 -->	
	<delete id="deleteDeepTotalByOperaDate" parameterType="com.dongnao.workbench.finance.model.OperaDate">
		delete from account_opera_deep_total
		where store_name = #{storeName,jdbcType=VARCHAR}
		<if test="null != propsMap.startDate and propsMap.startDate != ''">
			<![CDATA[
			and DATE_FORMAT(create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != propsMap.endDate and propsMap.endDate != ''">
			<![CDATA[
			and DATE_FORMAT(create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=DATE},'%Y-%c-%d')
			]]>
		</if> 
		<if test="null != createDate and createDate != ''">
			and DATE_FORMAT(create_date,'%Y-%c-%d') = DATE_FORMAT(#{createDate,jdbcType=DATE},'%Y-%c-%d')
		</if> 
		<if test="platformType != null and '' != platformType">  
			and platform_type = #{platformType,jdbcType=VARCHAR}
		</if>
	</delete>
	
	
	<!-- 生成浅运营表 -->
	<insert id="addSimpleTotalByOperaDate" parameterType="com.dongnao.workbench.finance.model.OperaDate">
		INSERT INTO account_opera_simple_total (
			<include refid="Base_Column_List" />
		)(
			SELECT
				CONCAT(create_date,store_name,platform_type) as id,
				store_id,
				store_name,
				create_date,
				sum(invalid_num) as invalid_num,
				sum(valid_num) as valid_num,
				sum(product_sale_amount) as product_sale_amount,
				sum(amount_receivable) as amount_receivable,
				sum(amount_payable) as amount_payable,
				sum(cyz_service_charge) as cyz_service_charge,
				sum(sale_gross_profit) as sale_gross_profit,
				sum(dist_price) as dist_price,
				sum(dist_all) as dist_all,
				sum(dist_diff) as dist_diff,
				sum(actual_merchant_dist_charge) as actual_merchant_dist_charge,
				sum(platform_activities_charge) as platform_activities_charge,
				sum(service_all) as service_all,
				sum(other_all) as other_all,
				sum(profit_all) as profit_all,
				remark,
				platform_type
			FROM
				opera_date_base_price
			WHERE
				store_name = #{storeName,jdbcType=VARCHAR}
			GROUP BY
				store_name,
				create_date
			)
			UNION(		
			SELECT
				CONCAT(create_date,store_name,platform_type) as id,
				store_id,
				store_name,
				create_date,
				sum(invalid_num) as invalid_num,
				sum(valid_num) as valid_num,
				sum(product_sale_amount) as product_sale_amount,
				sum(amount_receivable) as amount_receivable,
				sum(amount_payable) as amount_payable,
				sum(cyz_service_charge) as cyz_service_charge,
				sum(sale_gross_profit) as sale_gross_profit,
				sum(dist_price) as dist_price,
				sum(dist_all) as dist_all,
				sum(dist_diff) as dist_diff,
				sum(actual_merchant_dist_charge) as actual_merchant_dist_charge,
				sum(platform_activities_charge) as platform_activities_charge,
				sum(service_all) as service_all,
				sum(other_all) as other_all,
				sum(profit_all) as profit_all,
				remark,
				platform_type
			FROM
				opera_date_platform_account
			WHERE
				store_name = #{storeName,jdbcType=VARCHAR}
			GROUP BY
				store_name,
				create_date
			)
			UNION(
			SELECT
				CONCAT(create_date,store_name,platform_type) as id,
				store_id,
				store_name,
				create_date,
				sum(invalid_num) as invalid_num,
				sum(valid_num) as valid_num,
				sum(product_sale_amount) as product_sale_amount,
				sum(amount_receivable) as amount_receivable,
				sum(amount_payable) as amount_payable,
				sum(cyz_service_charge) as cyz_service_charge,
				sum(sale_gross_profit) as sale_gross_profit,
				sum(dist_price) as dist_price,
				sum(dist_all) as dist_all,
				sum(dist_diff) as dist_diff,
				sum(actual_merchant_dist_charge) as actual_merchant_dist_charge,
				sum(platform_activities_charge) as platform_activities_charge,
				sum(service_all) as service_all,
				sum(other_all) as other_all,
				sum(profit_all) as profit_all,
				remark,
				platform_type
			FROM
				opera_date_sale_rate
			WHERE
				store_name = #{storeName,jdbcType=VARCHAR}
			GROUP BY
				create_date,store_name,platform_type
			)
	</insert>
	<!-- 生成深运营表 -->
	<insert id="addDeepTotalByOperaDate" parameterType="com.dongnao.workbench.finance.model.OperaDate">
		INSERT INTO account_opera_deep_total (
		<include refid="Base_Column_List" />
		)(
			SELECT
				CONCAT(create_date,store_name,platform_type) as id,
				store_id,
				store_name,
				create_date,
				sum(invalid_num) as invalid_num,
				sum(valid_num) as valid_num,
				sum(product_sale_amount) as product_sale_amount,
				sum(amount_receivable) as amount_receivable,
				sum(amount_payable) as amount_payable,
				sum(cyz_service_charge) as cyz_service_charge,
				sum(sale_gross_profit) as sale_gross_profit,
				sum(dist_price) as dist_price,
				sum(dist_all) as dist_all,
				sum(dist_diff) as dist_diff,
				sum(actual_merchant_dist_charge) as actual_merchant_dist_charge,
				sum(platform_activities_charge) as platform_activities_charge,
				sum(service_all) as service_all,
				sum(other_all) as other_all,
				sum(profit_all) as profit_all,
				remark,
				platform_type
			FROM
				opera_date_deep_opera
			WHERE
				store_name = #{storeName,jdbcType=VARCHAR}
			GROUP BY
				create_date,store_name,platform_type
		)
	</insert>
	
	<!-- 修改浅运营表 -->
	<update id="updateSimpleTotal" parameterType="com.dongnao.workbench.finance.model.AccountOperaTotal">
		update account_opera_simple_total  set
			id= #{id,jdbcType=VARCHAR}
			<if test="invalidNum != null and '' != invalidNum">  
			,invalid_num = #{invalidNum,jdbcType=INTEGER}
			</if>
			<if test="validNum != null and '' != validNum">  
			,valid_num = #{validNum,jdbcType=INTEGER}
			</if>
			<if test="productSaleAmount != null and '' != productSaleAmount">  
			,product_sale_amount = #{productSaleAmount,jdbcType=VARCHAR}
			</if>
			<if test="amountReceivable != null and '' != amountReceivable">  
			,amount_receivable = #{amountReceivable,jdbcType=VARCHAR}
			</if>
			<if test="amountPayable != null and '' != amountPayable">  
			,amount_payable = #{amountPayable,jdbcType=VARCHAR}
			</if>
			<if test="cyzServiceCharge != null and '' != cyzServiceCharge">  
			,cyz_service_charge = #{cyzServiceCharge,jdbcType=VARCHAR}
			</if>
			<if test="saleGrossProfit != null and '' != saleGrossProfit">  
			,sale_gross_profit = #{saleGrossProfit,jdbcType=VARCHAR}
			</if>
			<if test="distPrice != null and '' != distPrice">  
			,dist_price = #{distPrice,jdbcType=VARCHAR}
			</if>
			<if test="distAll != null and '' != distAll">  
			,dist_all = #{distAll,jdbcType=VARCHAR}
			</if>
			<if test="distDiff != null and '' != distDiff">  
			,dist_diff = #{distDiff,jdbcType=VARCHAR}
			</if>
			<if test="actualMerchantDistCharge != null and '' != actualMerchantDistCharge">  
			,actual_merchant_dist_charge = #{actualMerchantDistCharge,jdbcType=VARCHAR}
			</if>
			<if test="platformActivitiesCharge != null and '' != platformActivitiesCharge">  
			,platform_activities_charge = #{platformActivitiesCharge,jdbcType=VARCHAR}
			</if>
			<if test="serviceAll != null and '' != serviceAll">  
			,service_all = #{serviceAll,jdbcType=VARCHAR}
			</if>
			<if test="profitAll != null and '' != profitAll">  
			,profit_all = #{profitAll,jdbcType=VARCHAR}
			</if>
			<if test="otherAll != null and '' != otherAll">  
			,other_all = #{otherAll,jdbcType=VARCHAR}
			</if>
			<if test="remark != null and '' != remark">  
			,remark = #{remark,jdbcType=VARCHAR}
			</if>
			<if test="platformType != null and '' != platformType">  
			,platform_type = #{platformType,jdbcType=VARCHAR}
			</if>
		where id = #{id,jdbcType=VARCHAR}
		<if test="createDate != null and '' != createDate">  
			and DATE_FORMAT(create_date,'%Y-%c-%d') = DATE_FORMAT(#{createDate,jdbcType=DATE},'%Y-%c-%d')
		</if>
	</update>
	<!-- 修改深运营表 -->
	<update id="updateDeepTotal" parameterType="com.dongnao.workbench.finance.model.AccountOperaTotal">
		update account_opera_deep_total set
			id= #{id,jdbcType=VARCHAR}
			<if test="invalidNum != null and '' != invalidNum">  
			,invalid_num = #{invalidNum,jdbcType=INTEGER}
			</if>
			<if test="validNum != null and '' != validNum">  
			,valid_num = #{validNum,jdbcType=INTEGER}
			</if>
			<if test="productSaleAmount != null and '' != productSaleAmount">  
			,product_sale_amount = #{productSaleAmount,jdbcType=VARCHAR}
			</if>
			<if test="amountReceivable != null and '' != amountReceivable">  
			,amount_receivable = #{amountReceivable,jdbcType=VARCHAR}
			</if>
			<if test="amountPayable != null and '' != amountPayable">  
			,amount_payable = #{amountPayable,jdbcType=VARCHAR}
			</if>
			<if test="cyzServiceCharge != null and '' != cyzServiceCharge">  
			,cyz_service_charge = #{cyzServiceCharge,jdbcType=VARCHAR}
			</if>
			<if test="saleGrossProfit != null and '' != saleGrossProfit">  
			,sale_gross_profit = #{saleGrossProfit,jdbcType=VARCHAR}
			</if>
			<if test="distPrice != null and '' != distPrice">  
			,dist_price = #{distPrice,jdbcType=VARCHAR}
			</if>
			<if test="distAll != null and '' != distAll">  
			,dist_all = #{distAll,jdbcType=VARCHAR}
			</if>
			<if test="distDiff != null and '' != distDiff">  
			,dist_diff = #{distDiff,jdbcType=VARCHAR}
			</if>
			<if test="actualMerchantDistCharge != null and '' != actualMerchantDistCharge">  
			,actual_merchant_dist_charge = #{actualMerchantDistCharge,jdbcType=VARCHAR}
			</if>
			<if test="platformActivitiesCharge != null and '' != platformActivitiesCharge">  
			,platform_activities_charge = #{platformActivitiesCharge,jdbcType=VARCHAR}
			</if>
			<if test="serviceAll != null and '' != serviceAll">  
			,service_all = #{serviceAll,jdbcType=VARCHAR}
			</if>
			<if test="profitAll != null and '' != profitAll">  
			,profit_all = #{profitAll,jdbcType=VARCHAR}
			</if>
			<if test="otherAll != null and '' != otherAll">  
			,other_all = #{otherAll,jdbcType=VARCHAR}
			</if>
			<if test="remark != null and '' != remark">  
			,remark = #{remark,jdbcType=VARCHAR}
			</if>
			<if test="platformType != null and '' != platformType">  
			,platform_type = #{platformType,jdbcType=VARCHAR}
			</if>
		where id = #{id,jdbcType=VARCHAR}
	</update>
</mapper>
